*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  line-height: 1.5;
  font-family: system-ui;
  background-color: var(--bg-primary);
  display: flex;
  flex-direction: column;
  min-block-size: 100vh;
  color: var(--color-text);
}

button,
label,
select,
[role="button"],
[role="option"],
label[for="toggle-mobile-preview"],
label[for="toggle-sidebar"],
label[for="toggle-theme"],
summary {
  cursor: pointer;
}

input,
button,
textarea,
select,
a[role="button"],
label[for="toggle-mobile-preview"],
label[for="toggle-sidebar"],
label[for="toggle-theme"],
summary {
  font: inherit;
  color: inherit;
  border: var(--border-primary);
  border-radius: var(--border-radius);
  padding-inline: var(--space-2xs);
  padding-block: var(--space-3xs);
}

input,
textarea,
select {
  background-color: var(--bg-primary);
}

textarea {
  resize: vertical;
}

input[type="file"] {
  inline-size: 100%;
}

input[type="color"] {
  padding: 0;
}

a[role="button"] {
  max-inline-size: fit-content;
  text-decoration: none;
}

summary {
  max-inline-size: fit-content;
}

button,
a[role="button"],
label[for="toggle-mobile-preview"],
label[for="toggle-sidebar"],
label[for="toggle-theme"],
summary {
  background-color: var(--bg-secondary);
}

label:has(svg) {
  display: inline-grid;
  place-content: center;
}

label[for="toggle-theme"] svg:first-of-type {
  display: var(--display-light);
}

label[for="toggle-theme"] svg:last-of-type {
  display: var(--display-dark);
}

:is(
    button,
    a[role="button"],
    label[for="toggle-mobile-preview"],
    label[for="toggle-sidebar"],
    label[for="toggle-theme"],
    summary
  ):hover {
  background-color: var(--bg-tertiary);
}

:is(button, input, textarea, select, a, summary, pre):focus,
:is(#toggle-mobile-preview, #toggle-sidebar):checked + label {
  outline: 0.125rem solid var(--color-accent);
  outline-offset: 0.25rem;
}

form {
  display: flex;
  flex-direction: column;
  gap: var(--space-s);
}

form > button[type="submit"] {
  max-inline-size: 30ch;
}

form label {
  display: flex;
  flex-direction: column;
  gap: var(--space-2xs);
  max-inline-size: 30ch;
}

form label:has(textarea) {
  max-inline-size: 75ch;
}

form .file-field {
  display: flex;
  align-items: end;
  gap: var(--space-2xs);
  flex-wrap: wrap;
}

section {
  display: flex;
  flex-direction: column;
  gap: var(--space-s);
}

section:has(> h2) + section:has(> h2) {
  margin-block-start: var(--space-l);
}

a {
  color: var(--color-accent);
}

a:has(img) {
  display: inline-block;
}

:is(h1, h2, h3, h4, h5, h6) > a {
  color: var(--color-text);
  text-decoration: none;
}

:is(h1, h2, h3, h4, h5, h6) > a:hover {
  text-decoration: underline;
  text-decoration-color: var(--color-accent);
}

details[open] summary {
  margin-block-end: var(--space-s);
}

img,
picture,
svg,
video {
  max-inline-size: 100%;
  block-size: auto;
  vertical-align: middle;
}

p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

h6 {
  font-size: var(--font-size-0);
}
h5 {
  font-size: var(--font-size-1);
}
h4 {
  font-size: var(--font-size-2);
}
h3 {
  font-size: var(--font-size-3);
}
h2 {
  font-size: var(--font-size-4);
}
h1 {
  font-size: var(--font-size-5);
}

small {
  font-size: var(--font-size--1);
}

pre {
  border: var(--border-primary);
  padding: var(--space-s);
  overflow-x: auto;
  flex-shrink: 0;
}

code {
  font-family: monospace;
  font-size: var(--font-size--1);
}

:not(pre) > code {
  background-color: var(--bg-secondary);
  border: var(--border-primary);
  padding-inline: var(--space-3xs);
}

:is(ul, ol):not(.unpadded) {
  padding-inline-start: var(--space-s);
}

.unpadded {
  list-style: none;
}

hr {
  block-size: 0.125rem;
  background-color: var(--bg-tertiary);
  border: none;
}

.scroll-container {
  overflow-x: auto;
}

table {
  border-collapse: collapse;
  inline-size: 100%;
  border: var(--border-primary);
}

th,
td {
  text-align: start;
  padding: var(--space-2xs);
  border: var(--border-primary);
}

ins {
  background-color: var(--color-success);
  color: var(--color-text-invert);
}

del {
  background-color: var(--color-error);
  color: var(--color-text-invert);
}

.hljs {
  color: var(--hl-color);
  background: var(--hl-bg);
}

.hljs-doctag,
.hljs-keyword,
.hljs-meta .hljs-keyword,
.hljs-template-tag,
.hljs-template-variable,
.hljs-type,
.hljs-variable.language_ {
  color: var(--hl-keyword);
}

.hljs-title,
.hljs-title.class_,
.hljs-title.class_.inherited__,
.hljs-title.function_ {
  color: var(--hl-title);
}

.hljs-attr,
.hljs-attribute,
.hljs-literal,
.hljs-meta,
.hljs-number,
.hljs-operator,
.hljs-selector-attr,
.hljs-selector-class,
.hljs-selector-id,
.hljs-variable {
  color: var(--hl-attr);
}

.hljs-meta .hljs-string,
.hljs-regexp,
.hljs-string {
  color: var(--hl-string);
}

.hljs-built_in,
.hljs-symbol {
  color: var(--hl-built-in);
}

.hljs-code,
.hljs-comment,
.hljs-formula {
  color: var(--hl-comment);
}

.hljs-name,
.hljs-quote,
.hljs-selector-pseudo,
.hljs-selector-tag {
  color: var(--hl-tag);
}

.hljs-subst {
  color: var(--hl-color);
}

.hljs-section {
  color: var(--hl-section);
  font-weight: bold;
}

.hljs-bullet {
  color: var(--hl-bullet);
}

.hljs-emphasis {
  color: var(--hl-emphasis);
  font-style: italic;
}

.hljs-strong {
  color: var(--hl-emphasis);
  font-weight: bold;
}

.hljs-addition {
  color: var(--hl-addition-text);
  background-color: var(--hl-addition-bg);
}

.hljs-deletion {
  color: var(--hl-deletion-text);
  background-color: var(--hl-deletion-bg);
}
